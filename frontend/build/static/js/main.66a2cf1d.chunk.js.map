{"version":3,"sources":["services/Locale/Locale.ts","services/Storage/LocalStorage.ts","services/provider.ts","actions/ActionTypes.ts","reducers/index.ts","reducers/LangReducer.ts","store/configureStore.ts","store/index.ts","store/persistConfig.ts","routes.ts","views/App.tsx","views/Root.tsx","index.tsx"],"names":["LocaleService","storageService","supportedLanguages","this","locale","navigator","languages","language","filterLocale","fallbackLanguage","indexOf","lang","setItem","LocalStorageService","key","window","localStorage","getItem","value","removeItem","clear","storage","Error","e","providers","Map","moduleName","implementation","set","has","get","CHANGE_LANG","rootReducer","combineReducers","LangReducer","state","action","type","ActionTypes","configureStore","persistConfig","persistedReducer","persistReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","persistStorage","whiteList","RouteBuilder","App","path","render","Fragment","exact","from","to","Root","provider","provide","ReactDOM","stores","document","getElementById"],"mappings":"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","file":"static/js/main.66a2cf1d.chunk.js","sourcesContent":["import { Lang } from \"../../common/types/Lang\"\nimport { IStorage } from \"../Storage/IStorage\"\nimport { ILocale } from \"./ILocale\"\n\nexport default class LocaleService implements ILocale {\n    storageService: IStorage\n    supportedLanguages: Array<string>\n\n    constructor(storageService: IStorage,  supportedLanguages: Array<string>) {\n      this.storageService = storageService\n      this.supportedLanguages = supportedLanguages\n    }\n  \n    getLocale() {\n      const locale =\n        (navigator.languages && navigator.languages[0]) ||\n        navigator.language ||\n        \"en\"\n      return this.filterLocale(locale)\n    }\n  \n    filterLocale(locale: string) {\n      if (this.supportedLanguages) {\n        const fallbackLanguage = this.supportedLanguages[0]\n          ? this.supportedLanguages[0]\n          : \"en\"\n        return this.supportedLanguages.indexOf(locale) > -1\n          ? locale as Lang\n          : fallbackLanguage as Lang\n      } else {\n        return locale as Lang\n      }\n    }\n  \n    setLocale(lang: Lang) {\n      this.storageService.setItem(\"lang\", lang)\n    }\n  }\n  ","import { IStorage } from \"./IStorage\"\n\nclass LocalStorageService implements IStorage {\n    getItem(key: string) {\n        return window.localStorage.getItem(key)\n    }\n\n    setItem(key: string, value: string){\n        window.localStorage.setItem(key, value)\n    }\n\n    removeItem(key: string) {\n        window.localStorage.removeItem(key)\n    }\n\n    clear() {\n        window.localStorage.clear()\n    }\n\n    static isAvailable() {\n        const storage = new LocalStorageService()\n\n        try {\n            const key = \"coders\"\n            const value = \"camp\"\n\n            storage.setItem(key, value)\n\n            if(storage.getItem(key) !== value) {\n                storage.removeItem(key)\n                throw new Error(\"Stored invalid value\")\n            }\n            storage.removeItem(key)\n            return true\n\n        } catch(e) {\n            return false\n        }\n    }\n}\n\nexport default LocalStorageService\n","import { ILocale } from \"./Locale/ILocale\"\nimport { IStorage } from \"./Storage/IStorage\"\n\ntype ProviderType = IStorage | ILocale\n\nclass Provider {\n    private providers: Map<string, ProviderType>\n\n    constructor() {\n      this.providers = new Map<string, ProviderType>()\n    }\n  \n    provide<T extends ProviderType>(moduleName: string, implementation: T): void {\n      this.providers.set(moduleName, implementation)\n    }\n  \n    get<T extends ProviderType>(moduleName: string): T {\n      if (this.providers.has(moduleName)) {\n        return this.providers.get(moduleName) as T\n      } else {\n        throw new Error(`Attempted to get an unregistered provider ${moduleName}`)\n      }\n    }\n  }\n  \nexport default new Provider()\n  ","//Lang actions\nexport const CHANGE_LANG = \"CHANGE_LANG\"","import { combineReducers } from \"redux\"\n//Delete this when proper reducers will be in use\nimport { LangReducer } from \"./LangReducer\"\n\nconst rootReducer = combineReducers({\n    LangReducer\n})\n\nexport default rootReducer\n","import { ActionType } from \"../actions/ActionInterfaces\"\nimport * as ActionTypes from \"../actions/ActionTypes\"\nimport { Lang } from \"../common/types/Lang\"\n\nexport const LangReducer = (\n    state: {\n        lang: Lang\n    } = {\n        lang: \"pl\"\n    },\n    action: ActionType\n) => {\n    switch (action.type) {\n        case ActionTypes.CHANGE_LANG:\n            return { lang: action.lang }\n        default:\n            return state\n    }\n}","import { createStore, Store } from \"redux\"\nimport { persistStore, persistReducer, PersistConfig } from \"redux-persist\"\nimport rootReducer from \"../reducers\"\nimport { AppState } from \".\"\n\ntype Params = {\n    persistConfig: PersistConfig<AppState>\n}\n\nconst configureStore = ({persistConfig}: Params) => {\n    const persistedReducer = persistReducer(persistConfig, rootReducer)\n\n    const store: Store<AppState> = createStore(\n        persistedReducer,\n        //@ts-ignore\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n\n    const persistor = persistStore(store)\n\n    return {\n        store,\n        persistor\n    }\n}\n\nexport default configureStore\n","import rootReducer from \"../reducers\"\nimport configureStore from \"./configureStore\"\nimport persistConfig from \"./persistConfig\"\n\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default configureStore({persistConfig})\n","/* eslint-disable import/no-anonymous-default-export */\nimport persistStorage from \"redux-persist/lib/storage\"\n\nexport default {\n    key: \"root\",\n    storage: persistStorage,\n    whiteList: []\n}","export const MAIN_ROUTE = \"/main\"\n\nexport const RouteBuilder = {\n    toIndex: ():string => \"/\",\n    toMain: (): string => MAIN_ROUTE,\n    toLogin: (): string => \"/login\",\n    toRegister: (): string => \"/register\"\n}","import React from \"react\"\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch,\n  } from \"react-router-dom\"\nimport { RouteBuilder } from \"../routes\"\n\n\nconst App = (): JSX.Element => {\n    return (\n        <Router>\n            <Switch>\n                <Route path={RouteBuilder.toLogin()} render={() => <React.Fragment />}/>\n                <Route path={RouteBuilder.toRegister()} render={() => <React.Fragment />}/>\n                <Route path={RouteBuilder.toMain()} render={() => <React.Fragment />}/>\n                <Redirect exact from=\"/\" to={RouteBuilder.toMain()} />\n            </Switch>\n        </Router>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport { Provider as StoreProvider } from \"react-redux\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport { Store } from \"redux\"\nimport { Persistor } from \"redux-persist\"\nimport { PersistGate } from \"redux-persist/integration/react\"\nimport App from \"./App\"\n\ntype Props = {\n    store: Store\n    persistor: Persistor\n}\n\nexport const Root: React.FC<Props> = ({store, persistor}) => (\n  <StoreProvider store={store} >\n      <PersistGate persistor={persistor}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n        </PersistGate>\n    </StoreProvider>\n)\n","import \"./index.css\"\nimport ReactDOM from \"react-dom\"\nimport LocaleService from \"./services/Locale/Locale\"\nimport { IStorage } from \"./services/Storage/IStorage\"\nimport LocalStorageService from \"./services/Storage/LocalStorage\"\nimport provider from \"./services/provider\"\nimport stores from \"./store\"\nimport { Root } from \"./views/Root\"\n\nconst init = (): void => {\n  provider.provide(\"storage\", new LocalStorageService())\n  provider.provide(\"locale\", new LocaleService(provider.get<IStorage>(\"storage\"), [\"en\", \"pl\"]))\n\n  ReactDOM.render(\n    <Root store={stores.store} persistor={stores.persistor} />,\n    document.getElementById(\"root\")\n  )\n}\n\ninit()\n"],"sourceRoot":""}